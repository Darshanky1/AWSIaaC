---
  AWSTemplateFormatVersion: 2010-09-09

  Parameters:
    VPCName:
      Type: String
      Description: Enter the name of the VPC.

    VPCCIDR:
      Type: String
      Default: 10.0.0.0/16
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      Description: Enter a valid CIDR which is not overlapping with existing VPC.
      ConstraintDescription: The CIDR must be valid and not overlapping.

    PrivateSubnetACIDR:
      Type: String
      Default: 10.0.1.0/24
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      Description: Enter a valid CIDR for the 1st Private Subnet.
      ConstraintDescription: The CIDR must be valid and not overlapping.

    PrivateSubnetBCIDR:
      Type: String
      Default: 10.0.2.0/24
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      Description: Enter a valid CIDR for the 2nd Private Subnet.
      ConstraintDescription: The CIDR must be valid and not overlapping.

    PublicSubnetACIDR:
      Type: String
      Default: 10.0.10.0/24
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      Description: Enter a valid CIDR for the 1st Public Subnet.
      ConstraintDescription: The CIDR must be valid and not overlapping.

    PublicSubnetBCIDR:
      Type: String
      Default: 10.0.11.0/24
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      Description: Enter a valid CIDR for the 2nd Public Subnet.
      ConstraintDescription: The CIDR must be valid and not overlapping.

  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VPCCIDR
        Tags:
        - Key: Name
          Value: !Ref AWS::StackName

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      DependsOn: VPC

    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt ElasticIPAddress.AllocationId
        SubnetId: !Ref PublicSubnetA
        Tags:
          - Key: Name
            Value: !Sub NAT-${AWS::StackName}
    ElasticIPAddress:
      Type: AWS::EC2::EIP
      Properties:
        Domain: VPC

    PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PrivateSubnetACIDR
        AvailabilityZone: !Select [ 0, !GetAZs ]
        Tags:
          - Key: Name
            Value: !Sub ${VPCName}-Private-A

    PrivateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PrivateSubnetBCIDR
        AvailabilityZone: !Select [ 1, !GetAZs ]
        Tags:
          - Key: Name
            Value: !Sub ${VPCName}-Private-B

    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PublicSubnetACIDR
        AvailabilityZone: !Select [ 0, !GetAZs ]
        Tags:
          - Key: Name
            Value: !Sub ${VPCName}-Public-A

    PublicSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PublicSubnetBCIDR
        AvailabilityZone: !Select [ 1, !GetAZs ]
        Tags:
          - Key: Name
            Value: !Sub ${VPCName}-Public-B

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${VPCName}-Public
    PublicRoute1:   # Public route table has direct routing to IGW:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway


    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${VPCName}-Private
    PrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NATGateway


 # #Route Table Association

    PublicSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetA
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetB
        RouteTableId: !Ref PublicRouteTable
    PrivateSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetA
        RouteTableId: !Ref PrivateRouteTable
    PrivateSubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetB
        RouteTableId: !Ref PrivateRouteTable

  Outputs:
    PrivateSubnets:
      Description: The private subnets in the VPC.
      Value: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ] ]
      Export:
        Name: !Sub ${AWS::StackName}-PrivateSubnets
    PublicSubnets:
      Description: The public subnets in the VPC.
      Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB ] ]
      Export:
        Name: !Sub ${AWS::StackName}-PublicSubnets
    PrivateSubnetA:
      Value: !Ref PrivateSubnetA
      Export:
        Name: !Sub ${AWS::StackName}-PrivateSubnetA
    PrivateSubnetB:
      Value: !Ref PrivateSubnetB
      Export:
        Name: !Sub ${AWS::StackName}-PrivateSubnetB
    PublicSubnetA:
      Value: !Ref PublicSubnetA
      Export:
        Name: !Sub ${AWS::StackName}-PublicSubnetA
    PublicSubnetB:
      Value: !Ref PublicSubnetB
      Export:
        Name: !Sub ${AWS::StackName}-PublicSubnetB

